{"version":3,"sources":["components/Footer/Footer.module.css","components/Navbar/Navbar.js","components/LandingPage/LandingPage.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js","components/LandingPage/LandingPage.module.css","components/Navbar/Navbar.module.css"],"names":["module","exports","container","Navbar","react_default","a","createElement","className","styles","href","PureComponent","LandingPage","callScrambler","scramble","setConfig","flip","setText","descramble","delay","then","setTimeout","_this","Scrambled","select","this","particles_default","particles","params","number","value","size","color","interactivity","events","onhover","enable","mode","scrambleContainer","picturesContainer","Footer","App","components_Navbar_Navbar","components_LandingPage_LandingPage","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,2NCeHC,mLAXP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAON,WACnBE,EAAAC,EAAAC,cAAA,KAAGG,KAAM,UAAT,SACAL,EAAAC,EAAAC,cAAA,KAAGG,KAAM,aAAT,YACAL,EAAAC,EAAAC,cAAA,KAAGG,KAAM,SAAT,QACAL,EAAAC,EAAAC,cAAA,KAAGG,KAAM,YAAT,mBAPKC,mEC+DNC,6MAtDXC,cAAgB,SAACC,GACbA,EACKC,UAAU,CAACC,KAAM,IACjBC,QAAQ,sCACRC,aACAD,QAAQ,4BACRF,UAAU,CAACI,MAAO,MAClBD,aACAD,QAAQ,wBACRC,aACAD,QAAQ,gBACRC,aACAD,QAAQ,gBACRC,aACAD,QAAQ,UACRC,aACAE,KAAK,kBAAMC,WAAW,kBAAMC,EAAKT,cAAcC,IAAW,2FApB/D,IAAMA,EAAWS,IAAUC,OAAO,MAClCC,KAAKZ,cAAcC,oCAuBnB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAON,WACnBE,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIE,UAAWC,IAAOkB,UAClBC,OAAQ,CACJD,UAAa,CACTE,OAAU,CACNC,MAAS,KAEbC,KAAQ,CACJC,MAAS,UACTF,MAAS,IAGjBG,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPC,QAAU,EACVC,KAAQ,gBAK5BhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO6B,mBACnBjC,EAAAC,EAAAC,cAAA,YAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO8B,4BArDb5B,kCCSX6B,mLARP,OACInC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAON,WACnBE,EAAAC,EAAAC,cAAA,4CALKI,iBCgBN8B,mLAZP,OACIpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAACmC,EAAD,OAEJrC,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,cAREC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,kCElInB3D,EAAAC,QAAA,CAAkBC,UAAA,+BAAAmC,kBAAA,uCAAAC,kBAAA,uCAAAZ,UAAA,mDCAlB1B,EAAAC,QAAA,CAAkBC,UAAA","file":"static/js/main.03807947.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__VBcDd\"};","import React, {PureComponent} from 'react';\nimport styles from './Navbar.module.css';\n\nclass Navbar extends PureComponent {\n    render() {\n        return (\n            <nav className={styles.container}>\n                <a href={'#reach'}>Reach</a>\n                <a href={'#projects'}>Projects</a>\n                <a href={'#blog'}>Blog</a>\n                <a href={'#contact'}>Contact</a>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, {PureComponent} from 'react';\nimport styles from './LandingPage.module.css';\nimport Scrambled from 'scramblejs';\nimport Particles from 'react-particles-js';\n\nclass LandingPage extends PureComponent {\n\n    componentDidMount() {\n        const scramble = Scrambled.select('h1');\n        this.callScrambler(scramble);\n    }\n\n    callScrambler = (scramble) => {\n        scramble\n            .setConfig({flip: 5})\n            .setText('Google Certified Android Developer')\n            .descramble()\n            .setText('Intel Software Innovator')\n            .setConfig({delay: 3000})\n            .descramble()\n            .setText('Full Stack Developer')\n            .descramble()\n            .setText('Entrepreneur')\n            .descramble()\n            .setText('Tech Speaker')\n            .descramble()\n            .setText('Mentor')\n            .descramble()\n            .then(() => setTimeout(() => this.callScrambler(scramble), 3000));\n    };\n\n    render() {\n        return (\n            <div className={styles.container}>\n                <Particles\n                    className={styles.particles}\n                    params={{\n                        \"particles\": {\n                            \"number\": {\n                                \"value\": 100\n                            },\n                            \"size\": {\n                                \"color\": \"#81c784\",\n                                \"value\": 4\n                            }\n                        },\n                        \"interactivity\": {\n                            \"events\": {\n                                \"onhover\": {\n                                    \"enable\": true,\n                                    \"mode\": \"repulse\"\n                                }\n                            }\n                        }\n                    }}/>\n                <div className={styles.scrambleContainer}>\n                    <h1></h1>\n                </div>\n                <div className={styles.picturesContainer}>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;","import React, {PureComponent} from 'react';\nimport styles from './Footer.module.css';\n\nclass Footer extends PureComponent {\n\n    render() {\n        return (\n            <div className={styles.container}>\n                <h3>Â© 2019 Vishal Dubey</h3>\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport LandingPage from './components/LandingPage/LandingPage';\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Navbar/>\n                </header>\n                <LandingPage/>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LandingPage_container__1lR76\",\"scrambleContainer\":\"LandingPage_scrambleContainer__GkILx\",\"picturesContainer\":\"LandingPage_picturesContainer__3bu2f\",\"particles\":\"LandingPage_particles__3gWiu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__10g1k\"};"],"sourceRoot":""}